#!/bin/bash

# üìä –°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Ugodo —Å–µ—Ä–≤–∏—Å–æ–≤
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./monitor.sh [watch]

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
status_ok() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

status_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

status_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

status_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞
check_port() {
    local port=$1
    local service=$2
    
    if curl -sf "http://localhost:$port" >/dev/null 2>&1; then
        status_ok "$service —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É $port"
        return 0
    else
        status_error "$service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É $port"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API endpoint
check_api() {
    local url=$1
    local name=$2
    
    local response=$(curl -s -o /dev/null -w "%{http_code}" "$url" 2>/dev/null)
    
    if [ "$response" = "200" ] || [ "$response" = "404" ]; then
        status_ok "$name API –æ—Ç–≤–µ—á–∞–µ—Ç (HTTP $response)"
        return 0
    else
        status_error "$name API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (HTTP $response)"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
check_database() {
    if command -v psql &> /dev/null; then
        if psql -h localhost -U postgres -d ugodo_db -c "SELECT 1;" >/dev/null 2>&1; then
            status_ok "PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞"
        else
            status_warning "PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
        fi
    else
        status_info "psql –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É PostgreSQL"
    fi
    
    if command -v redis-cli &> /dev/null; then
        if redis-cli ping | grep -q "PONG"; then
            status_ok "Redis –¥–æ—Å—Ç—É–ø–µ–Ω"
        else
            status_error "Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        fi
    else
        status_info "redis-cli –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É Redis"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
check_docker() {
    if command -v docker &> /dev/null; then
        status_info "Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:"
        docker compose ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}" 2>/dev/null || echo "  Docker Compose –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    else
        status_info "Docker –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ PM2 –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
check_pm2() {
    if command -v pm2 &> /dev/null; then
        status_info "PM2 –ø—Ä–æ—Ü–µ—Å—Å—ã:"
        pm2 list --no-color 2>/dev/null || echo "  PM2 –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    else
        status_info "PM2 –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
check_resources() {
    status_info "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:"
    
    # CPU
    if command -v top &> /dev/null; then
        local cpu_usage=$(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | sed 's/%us,//')
        echo "  CPU: ${cpu_usage}%"
    fi
    
    # –ü–∞–º—è—Ç—å
    if command -v free &> /dev/null; then
        local memory_info=$(free -h | grep Mem)
        echo "  $memory_info"
    fi
    
    # –î–∏—Å–∫
    if command -v df &> /dev/null; then
        echo "  –î–∏—Å–∫:"
        df -h / | tail -n1 | awk '{print "    –ö–æ—Ä–µ–Ω—å: " $3 " / " $2 " (" $5 " –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)"}'
        if [ -d "/var/lib/docker" ]; then
            local docker_size=$(du -sh /var/lib/docker 2>/dev/null | cut -f1)
            echo "    Docker: $docker_size"
        fi
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–æ–≤
check_logs() {
    status_info "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö:"
    
    # PM2 –ª–æ–≥–∏
    if [ -f "logs/medusa-error.log" ]; then
        local medusa_errors=$(tail -n5 logs/medusa-error.log 2>/dev/null | grep -i error | wc -l)
        if [ "$medusa_errors" -gt 0 ]; then
            status_warning "Medusa: $medusa_errors –æ—à–∏–±–æ–∫ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –∑–∞–ø–∏—Å—è—Ö"
        fi
    fi
    
    if [ -f "logs/frontend-error.log" ]; then
        local frontend_errors=$(tail -n5 logs/frontend-error.log 2>/dev/null | grep -i error | wc -l)
        if [ "$frontend_errors" -gt 0 ]; then
            status_warning "Frontend: $frontend_errors –æ—à–∏–±–æ–∫ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –∑–∞–ø–∏—Å—è—Ö"
        fi
    fi
    
    # Docker –ª–æ–≥–∏
    if command -v docker &> /dev/null; then
        local docker_errors=$(docker compose logs --tail=10 2>/dev/null | grep -i error | wc -l)
        if [ "$docker_errors" -gt 0 ]; then
            status_warning "Docker: $docker_errors –æ—à–∏–±–æ–∫ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –∑–∞–ø–∏—Å—è—Ö"
        fi
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
monitor() {
    clear
    echo "=================== üìä UGODO –ú–û–ù–ò–¢–û–†–ò–ù–ì ==================="
    echo "–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: $(date)"
    echo "=========================================================="
    echo
    
    status_info "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–æ–≤:"
    check_port 8000 "Frontend (Next.js)"
    check_port 9000 "Backend (Medusa)"
    check_port 9105 "MinIO (Storage)"
    echo
    
    status_info "üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints:"
    check_api "http://localhost:9000/store/products" "Store"
    check_api "http://localhost:9000/admin/products" "Admin"
    echo
    
    status_info "üóÑÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö:"
    check_database
    echo
    
    status_info "üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:"
    check_docker
    echo
    check_pm2
    echo
    
    status_info "üíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤:"
    check_resources
    echo
    
    status_info "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤:"
    check_logs
    echo
    
    echo "=========================================================="
    status_info "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –î–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ./monitor.sh watch"
}

# –†–µ–∂–∏–º –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
watch_mode() {
    while true; do
        monitor
        echo
        status_info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥... (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)"
        sleep 30
    done
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
if [ "$1" = "watch" ]; then
    watch_mode
else
    monitor
fi 