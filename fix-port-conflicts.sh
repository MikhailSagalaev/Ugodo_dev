#!/bin/bash

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ù–§–õ–ò–ö–¢–û–í –ü–û–†–¢–û–í ===${NC}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–Ω—è—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤
check_ports() {
    echo -e "\n${YELLOW}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤...${NC}"
    
    # –ü–æ—Ä—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç
    ports=(6379 9000 9001 9102 9105 9106 8000)
    
    for port in "${ports[@]}"; do
        if netstat -tulpn | grep ":$port " >/dev/null 2>&1; then
            process=$(netstat -tulpn | grep ":$port ")
            echo -e "${RED}‚ùå –ü–æ—Ä—Ç $port –∑–∞–Ω—è—Ç: $process${NC}"
        else
            echo -e "${GREEN}‚úÖ –ü–æ—Ä—Ç $port —Å–≤–æ–±–æ–¥–µ–Ω${NC}"
        fi
    done
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
stop_all_containers() {
    echo -e "\n${YELLOW}üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...${NC}"
    
    # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    docker stop $(docker ps -aq) 2>/dev/null || echo "–ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    
    # –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    docker rm $(docker ps -aq) 2>/dev/null || echo "–ù–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
    
    # –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–µ—Ç–∏ (–∫—Ä–æ–º–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö)
    docker network prune -f
    
    echo -e "${GREEN}‚úÖ –í—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏ —É–¥–∞–ª–µ–Ω—ã${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ Docker —Å–∏—Å—Ç–µ–º—ã
clean_docker() {
    echo -e "\n${YELLOW}üßπ –û—á–∏—Å—Ç–∫–∞ Docker —Å–∏—Å—Ç–µ–º—ã...${NC}"
    
    # –£–¥–∞–ª–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –æ–±—Ä–∞–∑—ã
    docker image prune -f
    
    # –£–¥–∞–ª–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–æ–º–∞
    docker volume prune -f
    
    # –£–¥–∞–ª–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å–µ—Ç–∏
    docker network prune -f
    
    # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    docker system prune -f
    
    echo -e "${GREEN}‚úÖ Docker —Å–∏—Å—Ç–µ–º–∞ –æ—á–∏—â–µ–Ω–∞${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ—Ä—Ç–∞—Ö
kill_port_processes() {
    echo -e "\n${YELLOW}üíÄ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–∞ –ø–æ—Ä—Ç–∞—Ö 9102, 9105, 9106...${NC}"
    
    # –ü–æ—Ä—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å
    conflict_ports=(9102 9105 9106)
    
    for port in "${conflict_ports[@]}"; do
        pid=$(netstat -tulpn | grep ":$port " | awk '{print $7}' | cut -d'/' -f1)
        if [ ! -z "$pid" ] && [ "$pid" != "-" ]; then
            echo -e "${YELLOW}–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ $pid –Ω–∞ –ø–æ—Ä—Ç—É $port...${NC}"
            kill -9 $pid 2>/dev/null
            sleep 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
            if netstat -tulpn | grep ":$port " >/dev/null 2>&1; then
                echo -e "${RED}‚ùå –ü–æ—Ä—Ç $port –≤—Å–µ –µ—â–µ –∑–∞–Ω—è—Ç${NC}"
            else
                echo -e "${GREEN}‚úÖ –ü–æ—Ä—Ç $port –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω${NC}"
            fi
        else
            echo -e "${GREEN}‚úÖ –ü–æ—Ä—Ç $port —É–∂–µ —Å–≤–æ–±–æ–¥–µ–Ω${NC}"
        fi
    done
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ docker-compose —Ñ–∞–π–ª–∞
check_compose_config() {
    echo -e "\n${YELLOW}üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ docker-compose.yml...${NC}"
    
    if [ -f "docker-compose.yml" ]; then
        echo -e "${GREEN}‚úÖ –§–∞–π–ª docker-compose.yml –Ω–∞–π–¥–µ–Ω${NC}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç—ã MinIO
        minio_ports=$(grep -A 10 "minio:" docker-compose.yml | grep "ports:" -A 5 | grep -E "\d+:\d+")
        echo -e "${BLUE}–ü–æ—Ä—Ç—ã MinIO –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:${NC}"
        echo "$minio_ports"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
        if docker-compose config >/dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å docker-compose.yml –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω${NC}"
        else
            echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–µ docker-compose.yml${NC}"
            docker-compose config
            return 1
        fi
    else
        echo -e "${RED}‚ùå –§–∞–π–ª docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
start_services() {
    echo -e "\n${YELLOW}üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"
    
    # –°–æ–∑–¥–∞—Ç—å —Å–µ—Ç—å –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    docker network create medusa-network 2>/dev/null || echo "–°–µ—Ç—å medusa-network —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã
    if docker-compose up -d; then
        echo -e "${GREEN}‚úÖ –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ${NC}"
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        sleep 5
        echo -e "\n${BLUE}–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:${NC}"
        docker-compose ps
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ MinIO
        echo -e "\n${BLUE}–õ–æ–≥–∏ MinIO (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫):${NC}"
        docker-compose logs --tail=10 minio
        
    else
        echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–∏—Å–æ–≤${NC}"
        echo -e "\n${BLUE}–õ–æ–≥–∏ –æ—à–∏–±–æ–∫:${NC}"
        docker-compose logs
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
test_services() {
    echo -e "\n${YELLOW}üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"
    
    # –¢–µ—Å—Ç Redis
    if docker exec ugodo_dev-redis-1 redis-cli ping >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Redis —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
    else
        echo -e "${RED}‚ùå Redis –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç${NC}"
    fi
    
    # –¢–µ—Å—Ç MinIO (–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤)
    if curl -f http://localhost:9105/minio/health/live >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ MinIO API (9105) —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
    else
        echo -e "${RED}‚ùå MinIO API (9105) –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç${NC}"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–æ–ª–∏ MinIO
    if curl -f http://localhost:9106 >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ MinIO Console (9106) –¥–æ—Å—Ç—É–ø–Ω–∞${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  MinIO Console (9106) –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)${NC}"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo -e "${BLUE}–ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...${NC}"
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    check_ports
    check_compose_config || exit 1
    
    # 2. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    stop_all_containers
    
    # 3. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã—Ö –ø–æ—Ä—Ç–∞—Ö
    kill_port_processes
    
    # 4. –û—á–∏—Å—Ç–∫–∞ Docker
    clean_docker
    
    # 5. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
    echo -e "\n${YELLOW}üîç –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏...${NC}"
    check_ports
    
    # 6. –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
    start_services || exit 1
    
    # 7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    test_services
    
    echo -e "\n${GREEN}üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!${NC}"
    echo -e "${BLUE}MinIO API: http://localhost:9105${NC}"
    echo -e "${BLUE}MinIO Console: http://localhost:9106${NC}"
    echo -e "${BLUE}Redis: http://localhost:6379${NC}"
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@" 