#!/bin/bash

# üöÄ –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Ugodo
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./deploy.sh [docker|pm2|auto]

set -e  # –í—ã—Ö–æ–¥–∏—Ç—å –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
DEPLOY_TYPE=${1:-auto}

log "–ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Ugodo (—Ç–∏–ø: $DEPLOY_TYPE)"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if [ ! -f "package.json" ] || [ ! -d "medusa" ]; then
    error "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ Ugodo"
    exit 1
fi

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
mkdir -p logs

# –§—É–Ω–∫—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Git
safe_git_pull() {
    log "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ Git..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Git
    if git status --porcelain | grep -q .; then
        warning "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö..."
        git stash push -m "Auto-stash before deploy $(date)"
    fi
    
    # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å pull
    if ! git pull origin main 2>/dev/null; then
        warning "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ä–∞—Å—Ö–æ–¥—è—â–∏–µ—Å—è –≤–µ—Ç–∫–∏, –ø—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ..."
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é pull (merge)
        git config pull.rebase false
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–Ω–æ–≤–∞
        if ! git pull origin main 2>/dev/null; then
            warning "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π pull –Ω–µ —É–¥–∞–ª—Å—è, –ø—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ..."
            git fetch origin main
            git reset --hard origin/main
        fi
        
        success "–ö–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ"
    else
        success "–ö–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"
    fi
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ –ë–î
backup_database() {
    if command -v pg_dump &> /dev/null; then
        local backup_file="backup_$(date +%Y%m%d_%H%M%S).sql"
        log "–°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: $backup_file"
        
        if pg_dump -h localhost -U postgres ugodo_db > "$backup_file" 2>/dev/null; then
            success "–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: $backup_file"
        else
            warning "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –ë–î (–≤–æ–∑–º–æ–∂–Ω–æ, –ë–î –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ)"
        fi
    else
        warning "pg_dump –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
health_check() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
    sleep 15
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º frontend
    if curl -sf http://localhost:8000 >/dev/null; then
        success "Frontend —Ä–∞–±–æ—Ç–∞–µ—Ç (–ø–æ—Ä—Ç 8000)"
    else
        error "Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8000"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º backend
    if curl -sf http://localhost:9000/store/products >/dev/null; then
        success "Backend —Ä–∞–±–æ—Ç–∞–µ—Ç (–ø–æ—Ä—Ç 9000)"
    else
        error "Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 9000"
        return 1
    fi
    
    success "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
}

# Docker —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
deploy_docker() {
    log "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Docker..."
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥
    safe_git_pull
    
    # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
    backup_database
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    docker compose down
    
    # –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–∑—ã
    log "–°–±–æ—Ä–∫–∞ –Ω–æ–≤—ã—Ö Docker –æ–±—Ä–∞–∑–æ–≤..."
    docker compose build --no-cache
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    log "–ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    docker compose up -d
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
    health_check
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã
    log "–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö Docker –æ–±—Ä–∞–∑–æ–≤..."
    docker image prune -af
    docker volume prune -f
}

# PM2 —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
deploy_pm2() {
    log "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ PM2..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ PM2
    if ! command -v pm2 &> /dev/null; then
        error "PM2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: npm install -g pm2"
        exit 1
    fi
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥
    safe_git_pull
    
    # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
    backup_database
    
    # –û–±–Ω–æ–≤–ª—è–µ–º backend
    log "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ backend (Medusa)..."
    cd medusa
    yarn install --frozen-lockfile
    yarn predeploy  # –ú–∏–≥—Ä–∞—Ü–∏–∏ –ë–î
    yarn build
    cd ..
    
    # –û–±–Ω–æ–≤–ª—è–µ–º frontend
    log "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ frontend (Next.js)..."
    yarn install --frozen-lockfile
    yarn build
    
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ PM2
    log "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ —á–µ—Ä–µ–∑ PM2..."
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    pm2 stop all || true
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    pm2 start ecosystem.config.js
    pm2 save
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
    health_check
}

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
deploy_auto() {
    if command -v docker &> /dev/null && [ -f "docker-compose.yml" ]; then
        log "–û–±–Ω–∞—Ä—É–∂–µ–Ω Docker, –∏—Å–ø–æ–ª—å–∑—É–µ–º Docker —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ"
        deploy_docker
    elif command -v pm2 &> /dev/null; then
        log "–û–±–Ω–∞—Ä—É–∂–µ–Ω PM2, –∏—Å–ø–æ–ª—å–∑—É–µ–º PM2 —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ"
        deploy_pm2
    else
        error "–ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏ Docker, –Ω–∏ PM2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è."
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–∞—Ç–∞
rollback() {
    error "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–∫–∞—Ç..."
    
    # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∫–æ–¥
    git checkout HEAD~1
    
    if [ "$DEPLOY_TYPE" = "docker" ]; then
        docker compose build --no-cache
        docker compose up -d
    elif [ "$DEPLOY_TYPE" = "pm2" ]; then
        cd medusa && yarn install && yarn build && cd ..
        yarn install && yarn build
        pm2 restart all
    fi
    
    error "–í—ã–ø–æ–ª–Ω–µ–Ω –æ—Ç–∫–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏"
    exit 1
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
case $DEPLOY_TYPE in
    docker)
        deploy_docker || rollback
        ;;
    pm2)
        deploy_pm2 || rollback
        ;;
    auto)
        deploy_auto || rollback
        ;;
    *)
        error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: $DEPLOY_TYPE"
        echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ./deploy.sh [docker|pm2|auto]"
        exit 1
        ;;
esac

success "üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Ugodo –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
log "Frontend –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞: http://localhost:8000"
log "Backend –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞: http://localhost:9000"
log "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞: http://localhost:9000/app" 