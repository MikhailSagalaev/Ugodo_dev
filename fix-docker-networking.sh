#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å Docker networking –∏ iptables
# –ê–≤—Ç–æ—Ä: DevOps team
# –î–∞—Ç–∞: 2024-12-10

set -e

echo "üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å Docker networking..."

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ root –ø—Ä–∞–≤
check_root() {
    if [[ $EUID -ne 0 ]]; then
        echo "‚ùå –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –æ—Ç root"
        echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: sudo $0"
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker
stop_docker() {
    log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker..."
    systemctl stop docker || true
    systemctl stop docker.socket || true
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ Docker networks
cleanup_networks() {
    log "–û—á–∏—Å—Ç–∫–∞ Docker networks..."
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
    docker rm -f $(docker ps -aq) 2>/dev/null || true
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ networks –∫—Ä–æ–º–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö
    docker network ls --format "{{.Name}}" | grep -v -E "^(bridge|host|none)$" | xargs -r docker network rm 2>/dev/null || true
    
    # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Docker —Å–∏—Å—Ç–µ–º—ã
    docker system prune -af --volumes 2>/dev/null || true
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ iptables
cleanup_iptables() {
    log "–û—á–∏—Å—Ç–∫–∞ iptables –ø—Ä–∞–≤–∏–ª Docker..."
    
    # –£–¥–∞–ª—è–µ–º Docker chains –∏–∑ iptables
    iptables -t nat -F DOCKER 2>/dev/null || true
    iptables -t nat -X DOCKER 2>/dev/null || true
    iptables -t filter -F DOCKER 2>/dev/null || true
    iptables -t filter -F DOCKER-ISOLATION-STAGE-1 2>/dev/null || true
    iptables -t filter -F DOCKER-ISOLATION-STAGE-2 2>/dev/null || true
    iptables -t filter -F DOCKER-USER 2>/dev/null || true
    iptables -t filter -X DOCKER 2>/dev/null || true
    iptables -t filter -X DOCKER-ISOLATION-STAGE-1 2>/dev/null || true
    iptables -t filter -X DOCKER-ISOLATION-STAGE-2 2>/dev/null || true
    iptables -t filter -X DOCKER-USER 2>/dev/null || true
    
    # –£–¥–∞–ª—è–µ–º FORWARD –ø—Ä–∞–≤–∏–ª–∞
    iptables -D FORWARD -j DOCKER-USER 2>/dev/null || true
    iptables -D FORWARD -j DOCKER-ISOLATION-STAGE-1 2>/dev/null || true
    iptables -D FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT 2>/dev/null || true
    iptables -D FORWARD -o docker0 -j DOCKER 2>/dev/null || true
    iptables -D FORWARD -i docker0 ! -o docker0 -j ACCEPT 2>/dev/null || true
    iptables -D FORWARD -i docker0 -o docker0 -j ACCEPT 2>/dev/null || true
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
restart_networking() {
    log "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ç–µ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ iptables (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    if command -v iptables-save &> /dev/null; then
        service iptables restart 2>/dev/null || true
    fi
    
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ç–µ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    systemctl restart networking 2>/dev/null || true
    systemctl restart systemd-networkd 2>/dev/null || true
    
    # –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–∏—Å—Ç–µ–º
    service networking restart 2>/dev/null || true
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Docker
start_docker() {
    log "–ó–∞–ø—É—Å–∫ Docker..."
    systemctl start docker
    systemctl enable docker
    
    # –ñ–¥–µ–º –ø–æ–∫–∞ Docker –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
    sleep 5
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    if systemctl is-active --quiet docker; then
        log "‚úÖ Docker —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω"
    else
        log "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Docker"
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker networking
test_docker() {
    log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Docker networking..."
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    if docker run --rm hello-world >/dev/null 2>&1; then
        log "‚úÖ Docker networking —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    else
        log "‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å Docker networking –æ—Å—Ç–∞–ª–∏—Å—å"
        exit 1
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    case "${1:-auto}" in
        "auto")
            log "üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Docker networking"
            check_root
            stop_docker
            cleanup_networks
            cleanup_iptables
            restart_networking
            start_docker
            test_docker
            log "‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ"
            ;;
        "restart-docker")
            log "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Docker —Å–µ—Ä–≤–∏—Å–∞"
            check_root
            stop_docker
            start_docker
            ;;
        "clean-iptables")
            log "üßπ –û—á–∏—Å—Ç–∫–∞ iptables –ø—Ä–∞–≤–∏–ª Docker"
            check_root
            cleanup_iptables
            ;;
        "test")
            log "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Docker"
            test_docker
            ;;
        "help"|"-h"|"--help")
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–∫–æ–º–∞–Ω–¥–∞]"
            echo ""
            echo "–ö–æ–º–∞–Ω–¥—ã:"
            echo "  auto          - –ü–æ–ª–Ω–æ–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
            echo "  restart-docker - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Docker —Å–µ—Ä–≤–∏—Å–∞"
            echo "  clean-iptables - –û—á–∏—Å—Ç–∫–∞ iptables –ø—Ä–∞–≤–∏–ª Docker"
            echo "  test          - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Docker networking"
            echo "  help          - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
            ;;
        *)
            echo "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1"
            echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: $0 help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
            exit 1
            ;;
    esac
}

# –ó–∞–ø—É—Å–∫
main "$@"
 