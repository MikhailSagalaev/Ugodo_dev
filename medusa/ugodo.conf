# Backend API and Admin Server Block (api.ugodo.ru)
server {
    listen 80;
    listen [::]:80;
    server_name api.ugodo.ru;

    # Redirect HTTP to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name api.ugodo.ru;

    ssl_certificate /etc/letsencrypt/live/api.ugodo.ru/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/api.ugodo.ru/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf; # Recommended SSL options
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;   # Recommended Diffie-Hellman params

    # Logging
    access_log /var/log/nginx/api.ugodo.ru_access.log;
    error_log /var/log/nginx/api.ugodo.ru_error.log;

    # Increase client_max_body_size for admin uploads if needed
    client_max_body_size 100M;

    # --- Minio Location Block ---
    location /minio/ {
        #  ^=   ^`         ^`       ^o          Minio API,  ^`       ^b   ^n ^i               ^` ^b ^c 9000  ^e   ^a ^b-     ^h     ^k       
        # (     ^` ^b,      ^b   ^` ^k      ^`     ^`   ^h          Docker-       ^b         ^`   Minio)
        proxy_pass http://127.0.0.1:9000/; #            ^a ^l,  ^g ^b   Minio API        ^a ^b     ^b     ^l          ^a ^b ^c             ^>                                          #        ^h           ^f   (http://127.0.0.1:9000/)           !

        proxy_set_header Host $host; #  ^=   ^`              ^`             ^l   ^k    ^e   ^a ^b
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-NginX-Proxy true; #  ^|       ^b    ^k ^b ^l                     ^o          ^b   ^` ^k ^e    ^`

        #  ^r              ^o      ^` ^`     ^b        ^`       ^b ^k  ^a        ^l ^h        ^d                   ^`       ^b   ^`   ^i    >        proxy_buffering off;
        proxy_request_buffering off;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        chunked_transfer_encoding on;
        proxy_max_temp_file_size 0;

        #  ^u ^a     Minio      ^a ^b ^`          ^b     ^g   ^b ^l      /minio/bucket/...        ^` ^o   ^c ^n,  ^b   rewrite         ^c   >        #  ^u ^a     Minio              ^b /bucket/...           ^`   ^d     ^a   /minio/,  ^b    ^`   ^a             ^b   ^` ^c  :
        # rewrite ^/minio/(.*)$ /$1 break; 
        #  ^~   ^k ^g      ^a S3_URL=https://api.ugodo.ru/minio/medusa-uploads    forcePathStyle=true    Medusa  ^m ^b           ^c      .   
    }
    # --- End Minio Location Block ---

    location /app {
        proxy_pass http://localhost:9000/app; # Medusa admin panel
                                               #            ^a ^l,  ^g ^b   Medusa (        Minio)  ^a   ^c ^h     ^b      localhost:9000   >                                               #  ^u ^a     Medusa         ^` ^c            ^` ^b ^c,    ^a   ^`     ^l        ^a ^l.        
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    location / {
        proxy_pass http://localhost:9000/; # Medusa backend API (       ^n ^g   ^o /health)
                                           #            ^a ^l,  ^g ^b   Medusa API  ^a   ^c ^h     ^b      localhost:9000
                                           #  ^u ^a     Medusa         ^` ^c            ^` ^b ^c,    ^a   ^`     ^l        ^a ^l.
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }
}
